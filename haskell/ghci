-- OverloadedStrings is often useful.
-- :set -XOverloadedStrings

-- Scoped type variables is often useful so we can specify the types
-- of variables (for example, in lambda expressions).
:set -XScopedTypeVariables
:set -XMultiWayIf

-- Used to colorize ghci output (you will need to cabal install funnyprint in a user or global package db)
-- :set -package funnyprint
-- :def color (\_ -> return (":set -interactive-print=FunnyPrint.funnyPrint\n:set prompt \"" ++ FunnyPrint.prompt "λ " "%s" " ¬\\nλ > " ++ "\"" ++ "\n:set prompt2 \"" ++ FunnyPrint.prompt2 "λ" "" " | " ++ "\""))

-- Show the types of evaluated expressions
:set +t

-- And stats
:set +s

-- Enable multi-line expressions with :{ and :}
:set +m

-- Shortcut for listing the modules (:modules)
:def modules (\_ -> return ":show modules")

-- Make the prompt a little more colorful.
-- And pretty-printing values

:def verbose (\_ -> return ":set prompt \"\ESC[0;34m %s > \ESC[m\"\n:set prompt2 \"%s|\ESC[0;34m%l\ESC[1;34m λ \ESC[m\"")
:def color (\_ -> return ":set prompt \"\ESC[0;34m%l\ESC[1;34m λ \ESC[m\"")
:def nocolor (\_ -> return ":set prompt \"%l λ \"")

-- Hoogle integration:
:def hoogle \x -> return $ ":!hoogle " ++ x

-- :set -package funnyprint

-- :def colorPrint (\_ -> return (":set -interactive-print=FunnyPrint.funnyPrintC)
-- :def nocolorPrint (\_ -> return ":set -interactive-print=print)
-- :colorPrint

-- turn fun on
:color

-- GHCI uses NoBuffering by default, but compiled programs use LineBuffering.
-- This helps prevent output interleaving, and make things a bit more consistent.
-- unfortunately, this frequently gets reset:
import System.IO
hSetBuffering stdout LineBuffering

-- Import some basic things that I always tend to need:
import qualified Data.Text as T
import           Text.Show.Pretty
import           System.IO

import qualified Data.Map.Strict as Map
import           Data.Map.Strict (Map)
import qualified Data.Sequence as Seq
import qualified Data.Set as Set
import           Data.Set (Set)

import           Lens.Family2

import           System.Environment (withArgs)
import           Test.Hspec.QuickCheck

-- save :: Show a => a -> IO ()
-- let save value = do
--      hPutStr stderr "Filename: "
--      path <- hGetLine stdin
--      writeFile path (show value)

-- :def store \_ -> return (":set -interactive-print=save")

:def store \_ -> return (":{\nlet save value = do { hPutStr stderr \"Filename: \"; path <- hGetLine stdin; writeFile path (show value);}\n:}\n:set -interactive-print=save")
:def stopStore \_ -> return (":set -interactive-print=print")


-- Doesn't work because 'main' is not in scope when defining the def.
-- :def runTest \tname -> withArgs ["-m", tname] main

:def find \str -> return (":! find . -name \"*.hs\" | xargs grep --color=always -n "++str)

:def git \str -> return (":! git "++str)

:{
:def! save (\args ->
  if | args == "--help" || args == "-h" -> do
       putStrLn "Usage: `> :save <filename>`"
       return ""
     | otherwise ->
       return (":{\nlet save value = appendFile "++show args++" (show value ++ \"\\n\")\n:}\n:set -interactive-print=save")
)
:}
