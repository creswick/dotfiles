# -*- mode: sh;-*-
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# Record the time of each command in history:
export HISTTIMEFORMAT="%h %d %H:%M:%S> "

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Load in the git branch prompt script.
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWCOLORHINTS=true
GIT_PS1_STATESEPARATOR=""
source ~/dotfiles/bash/git-prompt.sh

# Counts the number of slurm jobs you have running
sjobCount () {
    sjobs | \grep $USER | wc -l
}

# echo the empty string if you have no jobs running,
# or a formatted count if non-0.  Takes a prefix and sufix argument
# to format the string, when there is content to display.
#
# Invoke this in your PS1, like:
# PS1="\$(jobCountPrompt \"|\" \"|\") >"
#
# To see a count of your currently running jobs, e.g.:
#  |5| > _
jobCountPrompt () {
    #    count=`sjobCount`
    count="0"
    pfx=$1
    sfx=$2
    if [ "$count" == "0" ]; then
        echo ""
    else
        echo "$pfx$count$sfx"
    fi
}


#   Configure a pretty prompt:
DEFAULT="\[\033[0m\]"

BLACK="\[\033[0;30m\]"
BLUE="\[\033[0;34m\]"
GREEN="\[\033[0;32m\]"
CYAN="\[\033[0;36m\]"
RED="\[\033[0;31m\]"
PURPLE="\[\033[0;35m\]"
BROWN="\[\033[0;33m\]"
LGRAY="\[\033[0;37m\]"

DGRAY="\[\033[1;30m\]"
LBLUE="\[\033[1;34m\]"
LGREEN="\[\033[1;32m\]"
LCYAN="\[\033[1;36m\]"
LRED="\[\033[1;31m\]"
LPURPLE="\[\033[1;35m\]"
YELLOW="\[\033[1;33m\]"
WHITE="\[\033[1;37m\]"


if [ "$color_prompt" = yes ]; then
    # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1error='$( ret=$? ; test $ret -gt 0 && echo "[\[\e[1;31m\]${ret}\[\e[0m\]]" )'
    PS1="$PS1error ${LBLUE}|$LGRAY\u ${DGRAY}on $LGRAY\h ${DGRAY}@ $LGRAY\t $WHITE\w${LGRAY}\$(__git_ps1)${LBLUE}|\$(jobCountPrompt \"\" \"|\")\n $DEFAULT"
else
    # PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    PS1errorNoColor='$( ret=$? ; test $ret -gt 0 && echo "${ret}" )'
    PS1="$PS1errorNoColor${debian_chroot:+($debian_chroot)}|\u@\h | \t|\w \$(__git_ps1)|\n "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alFh'
alias la='ls -A'
alias l='ls -CF'

# enable colors in less:
alias less='less -r'

# force the use of colors in grep / ls; so they pipe through less,
# and return line numbers:
alias grep='grep -n --color=always '

# turn off port names in lsof:
alias lsof='lsof -P '

# Colors and nicer lines in tree:
alias tree='tree -C -A '

# Make xargs trigger subsequent aliases:
alias xargs='xargs '

# hask tags alias to generate an emacs TAGS file:
alias retag='hasktags -R -e --ignore-close-implementation . '

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


set_union () {
    sort $1 $2 | uniq
}

set_difference () {
    sort $1 $2 $2 | uniq -u
}

set_symmetric_difference() {
    sort $1 $2 | uniq -u
}

# Set slurm settings:
SLURM_MEM_PER_MODE=12000

# List the tmux sessions, so we know what's running:
if tmux info &> /dev/null; then
    tmux ls
fi
